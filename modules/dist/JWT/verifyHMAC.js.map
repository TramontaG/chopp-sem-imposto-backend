{"version":3,"file":"verifyHMAC.js","names":["_crypto","_interopRequireDefault","require","e","__esModule","default","WEBHOOK_SECRET","process","env","Error","MAX_SKEW_SECONDS","verify","rawBody","ts","header","alg","sigHex","split","now","Math","floor","Date","tsi","parseInt","Number","isFinite","abs","expected","crypto","createHmac","update","digest","timingSafeEqual","Buffer","from","useHMAC","req","res","next","chunks","on","c","push","concat","body","JSON","parse","toString","sig","raw","status","json","error","exports"],"sources":["../../src/JWT/verifyHMAC.ts"],"sourcesContent":["import crypto from \"crypto\";\nimport type { RequestHandler } from \"express\";\n\nconst WEBHOOK_SECRET = process.env.WEBHOOK_SECRET;\nif (!WEBHOOK_SECRET) {\n  throw new Error(\"You need a WEBHOOK_SECRET env var\");\n}\n\nconst MAX_SKEW_SECONDS = 300; // 5 min de tolerância\n\nconst verify = (rawBody: string, ts: string, header: string) => {\n  const [alg, sigHex] = (header || \"\").split(\"=\", 2);\n  if (alg !== \"sha256\" || !sigHex) return false;\n\n  // cheque skew do timestamp (ex.: 300s)\n  const now = Math.floor(Date.now() / 1000);\n  const tsi = parseInt(ts, 10);\n  if (!Number.isFinite(tsi) || Math.abs(now - tsi) > MAX_SKEW_SECONDS)\n    return false;\n\n  const expected = crypto\n    .createHmac(\"sha256\", WEBHOOK_SECRET)\n    .update(`${ts}.${rawBody}`)\n    .digest(\"hex\");\n\n  // comparação em tempo constante\n  return crypto.timingSafeEqual(\n    Buffer.from(sigHex, \"hex\"),\n    Buffer.from(expected, \"hex\")\n  );\n};\n\nexport const useHMAC: RequestHandler = (req, res, next) => {\n  const chunks: Buffer[] = [];\n  req.on(\"data\", (c) => chunks.push(c));\n  req.on(\"end\", () => {\n    (req as any).rawBody = Buffer.concat(chunks);\n    try {\n      req.body = JSON.parse((req as any).rawBody.toString(\"utf8\") || \"{}\");\n    } catch {\n      req.body = null;\n    }\n    const sig = req.header(\"X-Signature\") || \"\";\n    const ts = req.header(\"X-Timestamp\") || \"\";\n\n    const raw = (req as any).rawBody?.toString(\"utf8\") || \"no-body\";\n\n    if (!verify(raw, ts, sig)) {\n      return res.status(401).json({ error: \"Invalid signature or timestamp\" });\n    }\n\n    next();\n  });\n};\n"],"mappings":";;;;;;AAAA,IAAAA,OAAA,GAAAC,sBAAA,CAAAC,OAAA;AAA4B,SAAAD,uBAAAE,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAG5B,MAAMG,cAAc,GAAGC,OAAO,CAACC,GAAG,CAACF,cAAc;AACjD,IAAI,CAACA,cAAc,EAAE;EACnB,MAAM,IAAIG,KAAK,CAAC,mCAAmC,CAAC;AACtD;AAEA,MAAMC,gBAAgB,GAAG,GAAG,CAAC,CAAC;;AAE9B,MAAMC,MAAM,GAAGA,CAACC,OAAe,EAAEC,EAAU,EAAEC,MAAc,KAAK;EAC9D,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAG,CAACF,MAAM,IAAI,EAAE,EAAEG,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;EAClD,IAAIF,GAAG,KAAK,QAAQ,IAAI,CAACC,MAAM,EAAE,OAAO,KAAK;;EAE7C;EACA,MAAME,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACH,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;EACzC,MAAMI,GAAG,GAAGC,QAAQ,CAACV,EAAE,EAAE,EAAE,CAAC;EAC5B,IAAI,CAACW,MAAM,CAACC,QAAQ,CAACH,GAAG,CAAC,IAAIH,IAAI,CAACO,GAAG,CAACR,GAAG,GAAGI,GAAG,CAAC,GAAGZ,gBAAgB,EACjE,OAAO,KAAK;EAEd,MAAMiB,QAAQ,GAAGC,eAAM,CACpBC,UAAU,CAAC,QAAQ,EAAEvB,cAAc,CAAC,CACpCwB,MAAM,CAAC,GAAGjB,EAAE,IAAID,OAAO,EAAE,CAAC,CAC1BmB,MAAM,CAAC,KAAK,CAAC;;EAEhB;EACA,OAAOH,eAAM,CAACI,eAAe,CAC3BC,MAAM,CAACC,IAAI,CAAClB,MAAM,EAAE,KAAK,CAAC,EAC1BiB,MAAM,CAACC,IAAI,CAACP,QAAQ,EAAE,KAAK,CAC7B,CAAC;AACH,CAAC;AAEM,MAAMQ,OAAuB,GAAGA,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EACzD,MAAMC,MAAgB,GAAG,EAAE;EAC3BH,GAAG,CAACI,EAAE,CAAC,MAAM,EAAGC,CAAC,IAAKF,MAAM,CAACG,IAAI,CAACD,CAAC,CAAC,CAAC;EACrCL,GAAG,CAACI,EAAE,CAAC,KAAK,EAAE,MAAM;IACjBJ,GAAG,CAASxB,OAAO,GAAGqB,MAAM,CAACU,MAAM,CAACJ,MAAM,CAAC;IAC5C,IAAI;MACFH,GAAG,CAACQ,IAAI,GAAGC,IAAI,CAACC,KAAK,CAAEV,GAAG,CAASxB,OAAO,CAACmC,QAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;IACtE,CAAC,CAAC,MAAM;MACNX,GAAG,CAACQ,IAAI,GAAG,IAAI;IACjB;IACA,MAAMI,GAAG,GAAGZ,GAAG,CAACtB,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE;IAC3C,MAAMD,EAAE,GAAGuB,GAAG,CAACtB,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE;IAE1C,MAAMmC,GAAG,GAAIb,GAAG,CAASxB,OAAO,EAAEmC,QAAQ,CAAC,MAAM,CAAC,IAAI,SAAS;IAE/D,IAAI,CAACpC,MAAM,CAACsC,GAAG,EAAEpC,EAAE,EAAEmC,GAAG,CAAC,EAAE;MACzB,OAAOX,GAAG,CAACa,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,KAAK,EAAE;MAAiC,CAAC,CAAC;IAC1E;IAEAd,IAAI,CAAC,CAAC;EACR,CAAC,CAAC;AACJ,CAAC;AAACe,OAAA,CAAAlB,OAAA,GAAAA,OAAA","ignoreList":[]}