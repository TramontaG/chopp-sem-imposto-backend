{"version":3,"file":"index.js","names":["_firebaseAdmin","_interopRequireDefault","require","_firestore","e","__esModule","default","firebase","admin","initializeApp","credential","applicationDefault","db","exports","getFirestore","DbManager","collection","dbCollection","upsertEntity","id","data","doc","set","merge","readEntity","get","then","deleteEntity","delete","entityExists","exists","createQuery","cb","runQuery","query","result","docs","map","_default"],"sources":["../../src/database/index.ts"],"sourcesContent":["import { Query } from \"firebase-admin/firestore\";\nimport admin from \"firebase-admin\";\nimport { getFirestore } from \"firebase-admin/firestore\";\nimport type {\n  DatabaseFriendlyEntityModel,\n  EntityTypes,\n  WithID,\n} from \"./schemas\";\n\nconst firebase = admin.initializeApp({\n  credential: admin.credential.applicationDefault(),\n});\n\nexport const db = getFirestore(firebase);\n\nexport const DbManager = <EntityType extends EntityTypes>(\n  collection: EntityType\n) => {\n  const dbCollection = db.collection(collection);\n\n  const upsertEntity = (\n    id: string,\n    data: Partial<DatabaseFriendlyEntityModel<\"user\">>\n  ) => {\n    return dbCollection.doc(id).set(data, {\n      merge: true,\n    });\n  };\n\n  const readEntity = (id: string) => {\n    return dbCollection\n      .doc(id)\n      .get()\n      .then((doc) => doc.data() as WithID<EntityType>);\n  };\n\n  const deleteEntity = (id: string) => {\n    return dbCollection.doc(id).delete();\n  };\n\n  const entityExists = (id: string) => {\n    return dbCollection\n      .doc(id)\n      .get()\n      .then((doc) => doc.exists);\n  };\n\n  const createQuery = (cb: (queryBuilder: Query) => Query) => {\n    return cb(dbCollection);\n  };\n\n  const runQuery = (query: Query) => {\n    return query\n      .get()\n      .then((result) =>\n        result.docs.map((doc) => doc.data() as WithID<EntityType>)\n      );\n  };\n\n  return {\n    upsertEntity,\n    readEntity,\n    deleteEntity,\n    entityExists,\n    createQuery,\n    runQuery,\n  };\n};\n\nexport default DbManager;\n"],"mappings":";;;;;;AACA,IAAAA,cAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,UAAA,GAAAD,OAAA;AAAwD,SAAAD,uBAAAG,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAOxD,MAAMG,QAAQ,GAAGC,sBAAK,CAACC,aAAa,CAAC;EACnCC,UAAU,EAAEF,sBAAK,CAACE,UAAU,CAACC,kBAAkB,CAAC;AAClD,CAAC,CAAC;AAEK,MAAMC,EAAE,GAAAC,OAAA,CAAAD,EAAA,GAAG,IAAAE,uBAAY,EAACP,QAAQ,CAAC;AAEjC,MAAMQ,SAAS,GACpBC,UAAsB,IACnB;EACH,MAAMC,YAAY,GAAGL,EAAE,CAACI,UAAU,CAACA,UAAU,CAAC;EAE9C,MAAME,YAAY,GAAGA,CACnBC,EAAU,EACVC,IAAkD,KAC/C;IACH,OAAOH,YAAY,CAACI,GAAG,CAACF,EAAE,CAAC,CAACG,GAAG,CAACF,IAAI,EAAE;MACpCG,KAAK,EAAE;IACT,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,UAAU,GAAIL,EAAU,IAAK;IACjC,OAAOF,YAAY,CAChBI,GAAG,CAACF,EAAE,CAAC,CACPM,GAAG,CAAC,CAAC,CACLC,IAAI,CAAEL,GAAG,IAAKA,GAAG,CAACD,IAAI,CAAC,CAAuB,CAAC;EACpD,CAAC;EAED,MAAMO,YAAY,GAAIR,EAAU,IAAK;IACnC,OAAOF,YAAY,CAACI,GAAG,CAACF,EAAE,CAAC,CAACS,MAAM,CAAC,CAAC;EACtC,CAAC;EAED,MAAMC,YAAY,GAAIV,EAAU,IAAK;IACnC,OAAOF,YAAY,CAChBI,GAAG,CAACF,EAAE,CAAC,CACPM,GAAG,CAAC,CAAC,CACLC,IAAI,CAAEL,GAAG,IAAKA,GAAG,CAACS,MAAM,CAAC;EAC9B,CAAC;EAED,MAAMC,WAAW,GAAIC,EAAkC,IAAK;IAC1D,OAAOA,EAAE,CAACf,YAAY,CAAC;EACzB,CAAC;EAED,MAAMgB,QAAQ,GAAIC,KAAY,IAAK;IACjC,OAAOA,KAAK,CACTT,GAAG,CAAC,CAAC,CACLC,IAAI,CAAES,MAAM,IACXA,MAAM,CAACC,IAAI,CAACC,GAAG,CAAEhB,GAAG,IAAKA,GAAG,CAACD,IAAI,CAAC,CAAuB,CAC3D,CAAC;EACL,CAAC;EAED,OAAO;IACLF,YAAY;IACZM,UAAU;IACVG,YAAY;IACZE,YAAY;IACZE,WAAW;IACXE;EACF,CAAC;AACH,CAAC;AAACpB,OAAA,CAAAE,SAAA,GAAAA,SAAA;AAAA,IAAAuB,QAAA,GAAAzB,OAAA,CAAAP,OAAA,GAEaS,SAAS","ignoreList":[]}