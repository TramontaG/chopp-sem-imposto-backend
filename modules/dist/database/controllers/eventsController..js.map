{"version":3,"file":"eventsController..js","names":["_yasms","require","_","_interopRequireDefault","_SafeDatabaseTransaction","e","__esModule","default","MINUTE_IN_MS","eventsMemo","createMemoService","undefined","eventsDb","DbManager","eventsController","createEvent","name","description","location","organizer","date","bannerUrl","id","crypto","randomUUID","eventData","attendees","comments","hostContatInfo","interested","medias","type","createdAt","Date","now","updatedAt","deletedAt","transactionSuccess","upsertEntity","updateEvent","data","eventExists","assertEventExists","transactionError","FAIL_REASONS","UPDATE_NON_EXISTENT_ENTITY","getEventById","getData","readEntity","then","val","deleteEvent","deleteData","deleteEntity","entityExists","_default","exports"],"sources":["../../../src/database/controllers/eventsController..ts"],"sourcesContent":["import { createMemoService } from \"yasms\";\nimport DbManager from \"..\";\nimport type {\n  AllEntitiesModel,\n  DatabaseFriendlyEntityModel,\n  WithID,\n} from \"../schemas\";\nimport {\n  FAIL_REASONS,\n  transactionError,\n  transactionSuccess,\n} from \"../../Util/SafeDatabaseTransaction\";\n\nconst MINUTE_IN_MS = 1000 * 60;\nconst eventsMemo = createMemoService(undefined, MINUTE_IN_MS);\nconst eventsDb = DbManager(\"event\");\n\nconst eventsController = () => {\n  const createEvent = async ({\n    name,\n    description,\n    location,\n    organizer,\n    date,\n    bannerUrl,\n  }: {\n    name: string;\n    description: string;\n    location: string;\n    organizer: string | null;\n    date: number;\n    bannerUrl: string | null;\n  }) => {\n    const id = `${name}-${crypto.randomUUID()}`;\n    const eventData: AllEntitiesModel[\"event\"] = {\n      bannerUrl,\n      attendees: [],\n      comments: [],\n      date,\n      description,\n      hostContatInfo: null,\n      interested: [],\n      location,\n      medias: [],\n      name,\n      organizer,\n      type: \"other\",\n\n      createdAt: Date.now(),\n      updatedAt: Date.now(),\n      deletedAt: null,\n    };\n\n    return transactionSuccess(await eventsDb.upsertEntity(id, eventData));\n  };\n\n  const updateEvent = async (\n    id: string,\n    data: Partial<DatabaseFriendlyEntityModel<\"event\">>\n  ) => {\n    const eventExists = await assertEventExists(id);\n    if (!eventExists) {\n      return transactionError(FAIL_REASONS.UPDATE_NON_EXISTENT_ENTITY);\n    }\n\n    return transactionSuccess(await eventsDb.upsertEntity(id, data));\n  };\n\n  const getEventById = (id: string): Promise<WithID<\"event\">> =>\n    eventsMemo\n      .getData(id, () => eventsDb.readEntity(id))\n      .then((val) => val.data);\n\n  const deleteEvent = (id: string) => {\n    eventsMemo.deleteData(id);\n    eventsDb.deleteEntity(id);\n  };\n\n  const assertEventExists = (id: string): Promise<boolean> =>\n    eventsMemo\n      .getData(`exists/${id}`, () => eventsDb.entityExists(id))\n      .then((val) => val.data);\n\n  return {\n    createEvent,\n    getEventById,\n    updateEvent,\n    deleteEvent,\n    assertEventExists,\n  };\n};\n\nexport default eventsController();\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,CAAA,GAAAC,sBAAA,CAAAF,OAAA;AAMA,IAAAG,wBAAA,GAAAH,OAAA;AAI4C,SAAAE,uBAAAE,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAE5C,MAAMG,YAAY,GAAG,IAAI,GAAG,EAAE;AAC9B,MAAMC,UAAU,GAAG,IAAAC,wBAAiB,EAACC,SAAS,EAAEH,YAAY,CAAC;AAC7D,MAAMI,QAAQ,GAAG,IAAAC,SAAS,EAAC,OAAO,CAAC;AAEnC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAC7B,MAAMC,WAAW,GAAG,MAAAA,CAAO;IACzBC,IAAI;IACJC,WAAW;IACXC,QAAQ;IACRC,SAAS;IACTC,IAAI;IACJC;EAQF,CAAC,KAAK;IACJ,MAAMC,EAAE,GAAG,GAAGN,IAAI,IAAIO,MAAM,CAACC,UAAU,CAAC,CAAC,EAAE;IAC3C,MAAMC,SAAoC,GAAG;MAC3CJ,SAAS;MACTK,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE,EAAE;MACZP,IAAI;MACJH,WAAW;MACXW,cAAc,EAAE,IAAI;MACpBC,UAAU,EAAE,EAAE;MACdX,QAAQ;MACRY,MAAM,EAAE,EAAE;MACVd,IAAI;MACJG,SAAS;MACTY,IAAI,EAAE,OAAO;MAEbC,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACrBC,SAAS,EAAEF,IAAI,CAACC,GAAG,CAAC,CAAC;MACrBE,SAAS,EAAE;IACb,CAAC;IAED,OAAO,IAAAC,2CAAkB,EAAC,MAAMzB,QAAQ,CAAC0B,YAAY,CAAChB,EAAE,EAAEG,SAAS,CAAC,CAAC;EACvE,CAAC;EAED,MAAMc,WAAW,GAAG,MAAAA,CAClBjB,EAAU,EACVkB,IAAmD,KAChD;IACH,MAAMC,WAAW,GAAG,MAAMC,iBAAiB,CAACpB,EAAE,CAAC;IAC/C,IAAI,CAACmB,WAAW,EAAE;MAChB,OAAO,IAAAE,yCAAgB,EAACC,qCAAY,CAACC,0BAA0B,CAAC;IAClE;IAEA,OAAO,IAAAR,2CAAkB,EAAC,MAAMzB,QAAQ,CAAC0B,YAAY,CAAChB,EAAE,EAAEkB,IAAI,CAAC,CAAC;EAClE,CAAC;EAED,MAAMM,YAAY,GAAIxB,EAAU,IAC9Bb,UAAU,CACPsC,OAAO,CAACzB,EAAE,EAAE,MAAMV,QAAQ,CAACoC,UAAU,CAAC1B,EAAE,CAAC,CAAC,CAC1C2B,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACV,IAAI,CAAC;EAE5B,MAAMW,WAAW,GAAI7B,EAAU,IAAK;IAClCb,UAAU,CAAC2C,UAAU,CAAC9B,EAAE,CAAC;IACzBV,QAAQ,CAACyC,YAAY,CAAC/B,EAAE,CAAC;EAC3B,CAAC;EAED,MAAMoB,iBAAiB,GAAIpB,EAAU,IACnCb,UAAU,CACPsC,OAAO,CAAC,UAAUzB,EAAE,EAAE,EAAE,MAAMV,QAAQ,CAAC0C,YAAY,CAAChC,EAAE,CAAC,CAAC,CACxD2B,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACV,IAAI,CAAC;EAE5B,OAAO;IACLzB,WAAW;IACX+B,YAAY;IACZP,WAAW;IACXY,WAAW;IACXT;EACF,CAAC;AACH,CAAC;AAAC,IAAAa,QAAA,GAAAC,OAAA,CAAAjD,OAAA,GAEaO,gBAAgB,CAAC,CAAC","ignoreList":[]}