{"version":3,"file":"userController.js","names":["_firestore","require","_","_interopRequireDefault","_eventsController","_yasms","_SafeDatabaseTransaction","e","__esModule","default","ownKeys","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","MINUTE_IN_MS","userMemo","createMemoService","undefined","userDB","DbManager","queries","filterByPhoneNumber","phoneNumber","createQuery","q","where","filterByIds","ids","getAll","getAllConfirmed","userManager","createUser","name","city","DOB","source","confirmed","deleteData","phoneNotInUse","assertPhoneNotInUse","transactionError","FAIL_REASONS","ALREADY_EXISTS","id","crypto","randomUUID","userData","Boolean","eventsAttended","createdAt","Date","now","updatedAt","deletedAt","neighborhood","profession","sex","upsertEntity","transactionSuccess","getAllUsers","data","runQuery","updateUser","getUserById","getData","readEntity","then","val","deleteUser","assertUserExists","exists","entityExists","results","userAttendToEvent","userId","eventId","userExists","Error","eventExists","eventsController","assertEventExists","FieldValue","arrayUnion","updateEvent","attendees","userInterestedInEvent","interested","getUsersByIds","users","getTotalUsers","usersAmount","countByQuery","amount","_default","exports"],"sources":["../../../src/database/controllers/userController.ts"],"sourcesContent":["import { FieldValue } from \"firebase-admin/firestore\";\nimport DbManager from \"..\";\nimport type {\n  AllEntitiesModel,\n  DatabaseFriendlyEntityModel,\n  WithID,\n} from \"../schemas\";\nimport eventsController from \"./eventsController.\";\nimport { createMemoService } from \"yasms\";\nimport {\n  FAIL_REASONS,\n  transactionError,\n  transactionSuccess,\n} from \"../../Util/SafeDatabaseTransaction\";\n\nconst MINUTE_IN_MS = 1000 * 60;\nconst userMemo = createMemoService(undefined, MINUTE_IN_MS);\nconst userDB = DbManager(\"user\");\n\nconst queries = {\n  filterByPhoneNumber: (phoneNumber: string) => {\n    return userDB.createQuery((q) =>\n      q.where(\"phoneNumber\", \"==\", phoneNumber).where(\"deletedAt\", \"==\", null)\n    );\n  },\n  filterByIds: (ids: string[]) => {\n    return userDB.createQuery((q) => q.where(\"id\", \"in\", ids));\n  },\n  getAll: () => {\n    return userDB.createQuery((q) => q.where(\"deletedAt\", \"==\", null));\n  },\n  getAllConfirmed: () => {\n    return userDB.createQuery((q) =>\n      q.where(\"confirmed\", \"==\", true).where(\"deletedAt\", \"==\", null)\n    );\n  },\n};\n\nconst userManager = () => {\n  const createUser = async ({\n    name,\n    phoneNumber,\n    city,\n    DOB,\n    source,\n    confirmed,\n  }: {\n    name: string;\n    phoneNumber: string;\n    city: string;\n    DOB: number | null;\n    source: AllEntitiesModel[\"user\"][\"source\"] | null;\n    confirmed: boolean | null;\n  }) => {\n    userMemo.deleteData(`queryphone-${phoneNumber}`); //should be removed\n\n    const phoneNotInUse = await assertPhoneNotInUse(phoneNumber);\n    if (!phoneNotInUse) {\n      return transactionError(FAIL_REASONS.ALREADY_EXISTS);\n    }\n\n    const id = `${name}-${crypto.randomUUID()}`;\n    const userData: AllEntitiesModel[\"user\"] = {\n      name,\n      phoneNumber,\n      city,\n      DOB,\n      confirmed: Boolean(confirmed),\n      eventsAttended: [],\n      createdAt: Date.now(),\n      updatedAt: Date.now(),\n      deletedAt: null,\n      neighborhood: null,\n      profession: null,\n      sex: null,\n      source: source || \"novo\",\n    };\n\n    await userDB.upsertEntity(id, userData);\n\n    return transactionSuccess({ id });\n  };\n\n  const getAllUsers = async () => {\n    const data = await userDB.runQuery(queries.getAll());\n    return data;\n  };\n\n  const updateUser = (\n    id: string,\n    data: Partial<DatabaseFriendlyEntityModel<\"user\">>\n  ) => {\n    userMemo.deleteData(id);\n\n    return userDB.upsertEntity(id, {\n      ...data,\n      updatedAt: Date.now(),\n    });\n  };\n\n  const getUserById = (id: string): Promise<WithID<\"user\">> => {\n    return userMemo\n      .getData(id, () => userDB.readEntity(id))\n      .then((val) => val.data);\n  };\n\n  const deleteUser = (id: string) => {\n    userMemo.deleteData(id);\n    return userDB.upsertEntity(id, { deletedAt: Date.now() });\n  };\n\n  const assertUserExists = async (id: string): Promise<boolean> => {\n    const exists = await userMemo\n      .getData(`exists/${id}`, () => userDB.entityExists(id))\n      .then((val) => val.data);\n\n    return exists;\n  };\n\n  const assertPhoneNotInUse = async (phoneNumber: string): Promise<boolean> => {\n    const results: WithID<\"user\">[] = await userMemo\n      .getData(`queryphone-${phoneNumber}`, () =>\n        userDB.runQuery(queries.filterByPhoneNumber(phoneNumber))\n      )\n      .then((val) => val.data);\n\n    return results.length === 0;\n  };\n\n  const userAttendToEvent = async (userId: string, eventId: string) => {\n    const userExists = await assertUserExists(userId);\n    if (!userExists) throw new Error(\"User does not exist\");\n\n    const eventExists = await eventsController.assertEventExists(eventId);\n    if (!eventExists) throw new Error(\"Event does not exist\");\n\n    updateUser(userId, {\n      eventsAttended: FieldValue.arrayUnion(eventId),\n    });\n\n    eventsController.updateEvent(eventId, {\n      attendees: FieldValue.arrayUnion(userId),\n    });\n\n    return eventId;\n  };\n\n  const userInterestedInEvent = async (userId: string, eventId: string) => {\n    const userExists = await assertUserExists(userId);\n    if (!userExists) throw new Error(\"User does not exist\");\n\n    const eventExists = await eventsController.assertEventExists(eventId);\n    if (!eventExists) throw new Error(\"Event does not exist\");\n\n    eventsController.updateEvent(eventId, {\n      interested: FieldValue.arrayUnion(userId),\n    });\n\n    return eventId;\n  };\n\n  const getUsersByIds = async (ids: string[]) => {\n    const users = await userDB.runQuery(queries.filterByIds(ids));\n    return users;\n  };\n\n  const getTotalUsers = async (confirmed: boolean) => {\n    const usersAmount = await userDB.countByQuery(\n      confirmed ? queries.getAllConfirmed() : queries.getAll()\n    );\n    return transactionSuccess({ amount: usersAmount });\n  };\n\n  return {\n    createUser,\n    getAllUsers,\n    updateUser,\n    getUserById,\n    deleteUser,\n    assertUserExists,\n    getUsersByIds,\n    assertPhoneNotInUse,\n    userAttendToEvent,\n    userInterestedInEvent,\n    getTotalUsers,\n  };\n};\n\nexport default userManager();\n"],"mappings":"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","ignoreList":[]}