{"version":3,"file":"adminsController.js","names":["_","_interopRequireDefault","require","_crypto","e","__esModule","default","adminDb","DbManager","queries","getAdminByUsername","username","createQuery","q","where","hashPassword","password","salt","Promise","resolve","reject","crypto","scrypt","err","derivedKey","toString","adminController","createAdmin","name","permissions","adminExists","runQuery","Error","id","randomUUID","randomBytes","admin","passwordHash","createdAt","Date","now","updatedAt","deletedAt","upsertEntity","getAdmin","readEntity","updateAdmin","updateData","deleteAdmin","deleteEntity","login","hashedPassword","_default","exports"],"sources":["../../../src/database/controllers/adminsController.ts"],"sourcesContent":["import DbManager from \"..\";\nimport type { AllEntitiesModel, DatabaseFriendlyEntityModel } from \"../schemas\";\nimport crypto from \"crypto\";\n\nconst adminDb = DbManager(\"admin\");\n\nconst queries = {\n  getAdminByUsername: (username: string) =>\n    adminDb.createQuery((q) => q.where(\"username\", \"==\", username)),\n};\n\nconst hashPassword = (password: string, salt: string): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    crypto.scrypt(password, salt, 128, (err, derivedKey) => {\n      if (err) reject(err);\n      resolve(derivedKey.toString(\"hex\"));\n    });\n  });\n};\n\nconst adminController = () => {\n  const createAdmin = async ({\n    username,\n    password,\n    name,\n    permissions,\n  }: {\n    username: string;\n    name: string;\n    permissions: string[];\n    password: string;\n  }) => {\n    const adminExists = (\n      await adminDb.runQuery(queries.getAdminByUsername(username))\n    )[0];\n\n    if (!!adminExists) {\n      throw new Error(\"Admin already exists\");\n    }\n\n    const id = `admin_${name}_${crypto.randomUUID()}`;\n    const salt = crypto.randomBytes(32).toString(\"hex\");\n\n    const admin: AllEntitiesModel[\"admin\"] = {\n      username,\n      name,\n      salt,\n      permissions,\n      passwordHash: await hashPassword(password, salt),\n\n      createdAt: Date.now(),\n      updatedAt: Date.now(),\n      deletedAt: null,\n    };\n\n    return await adminDb.upsertEntity(id, admin);\n  };\n\n  const getAdmin = async (id: string) => {\n    return await adminDb.readEntity(id);\n  };\n\n  const updateAdmin = async (\n    id: string,\n    updateData: Partial<DatabaseFriendlyEntityModel<\"admin\">>\n  ) => {\n    return await adminDb.upsertEntity(id, updateData);\n  };\n\n  const deleteAdmin = async (id: string) => {\n    return await adminDb.deleteEntity(id);\n  };\n\n  const login = async (username: string, password: string) => {\n    const admin = (\n      await adminDb.runQuery(queries.getAdminByUsername(username))\n    )[0];\n    if (!admin) throw new Error(\"Admin not found\");\n\n    const hashedPassword = await hashPassword(password, admin.salt);\n    if (hashedPassword !== admin.passwordHash)\n      throw new Error(\"Invalid password\");\n\n    return admin;\n  };\n\n  return {\n    createAdmin,\n    getAdmin,\n    updateAdmin,\n    deleteAdmin,\n    login,\n  };\n};\n\nexport default adminController();\n"],"mappings":"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","ignoreList":[]}