{"version":3,"file":"sanitizeCity.js","names":["_userController","_interopRequireDefault","require","_yasms","e","__esModule","default","cityMemo","createMemoService","DIACRITICS_RE","stripDiacritics","s","normalize","replace","stripUfSuffix","normalizeCityForCompare","trim","toLowerCase","toTitleCaseBR","lower","keepLower","Set","split","map","w","i","has","charAt","toUpperCase","slice","join","levenshtein","a","b","length","v0","Array","v1","j","cost","Math","min","similarity","dist","maxLen","max","getBrazilianCities","res","getData","fetch","ok","Error","status","data","json","unique","cities","nome","add","push","name","normalized","findBestCityMatch","input","minScore","cityList","cleanedInputTitle","q","best","score","candidate","bestScore","c","noDia","toSimple","dryRunNormalizeCities","console","log","allUsers","userController","getAllUsers","suggestions","u","before","city","toString","match","toFixed","id","after"],"sources":["../../src/Util/sanitizeCity.ts"],"sourcesContent":["import userController from \"../database/controllers/userController\";\nimport { createMemoService } from \"yasms\";\n\nconst cityMemo = createMemoService<Array<{ nome: string }>>();\n\n// cities-normalizer.ts\ntype CanonicalCity = {\n  name: string; // Nome com acento correto (IBGE)\n  normalized: string; // Nome sem acento/espacos extras/sem UF\n};\n\nconst DIACRITICS_RE = /\\p{Diacritic}/gu;\n\nfunction stripDiacritics(s: string) {\n  return s.normalize(\"NFD\").replace(DIACRITICS_RE, \"\");\n}\n\nfunction stripUfSuffix(s: string) {\n  // remove padrões comuns: \" - SP\", \"/SP\", \", SP\", \" SP\" no fim\n  return s.replace(/[\\s,/-]+[A-Za-z]{2}\\s*$/i, \"\");\n}\n\nfunction normalizeCityForCompare(s: string) {\n  return stripDiacritics(\n    stripUfSuffix(s).trim().toLowerCase().replace(/\\s+/g, \" \")\n  );\n}\n\nfunction toTitleCaseBR(s: string) {\n  // Title Case simples (mantém preposições minúsculas comuns)\n  const lower = s.toLowerCase();\n  const keepLower = new Set([\"da\", \"de\", \"do\", \"das\", \"dos\", \"e\"]);\n  return lower\n    .split(/\\s+/)\n    .map((w, i) => {\n      if (i > 0 && keepLower.has(w)) return w;\n      return w.charAt(0).toUpperCase() + w.slice(1);\n    })\n    .join(\" \");\n}\n\n// Levenshtein otimizado\nfunction levenshtein(a: string, b: string): number {\n  if (a === b) return 0;\n  if (!a.length) return b.length;\n  if (!b.length) return a.length;\n\n  const v0 = new Array(b.length + 1);\n  const v1 = new Array(b.length + 1);\n\n  for (let i = 0; i <= b.length; i++) v0[i] = i;\n\n  for (let i = 0; i < a.length; i++) {\n    v1[0] = i + 1;\n    for (let j = 0; j < b.length; j++) {\n      const cost = a[i] === b[j] ? 0 : 1;\n      v1[j + 1] = Math.min(\n        v1[j] + 1, // inserção\n        v0[j + 1] + 1, // deleção\n        v0[j] + cost // substituição\n      );\n    }\n    for (let j = 0; j <= b.length; j++) v0[j] = v1[j];\n  }\n  return v1[b.length];\n}\n\n// Similaridade baseada em Levenshtein (1 = igual, 0 = totalmente diferente)\nfunction similarity(a: string, b: string): number {\n  const dist = levenshtein(a, b);\n  const maxLen = Math.max(a.length, b.length) || 1;\n  return 1 - dist / maxLen;\n}\n\nexport type MatchResult = {\n  best: string | null;\n  score: number;\n  candidate: string | null;\n};\n\nexport async function getBrazilianCities(): Promise<CanonicalCity[]> {\n  const res = await cityMemo.getData(\"city-list\", async () => {\n    const res = await fetch(\n      \"https://servicodados.ibge.gov.br/api/v1/localidades/municipios\"\n    );\n    if (!res.ok)\n      throw new Error(`Falha ao buscar municípios do IBGE: ${res.status}`);\n    const data = (await res.json()) as Array<{ nome: string }>;\n    return data;\n  });\n\n  const unique = new Set<string>();\n  const cities: CanonicalCity[] = [];\n  for (const { nome } of res.data) {\n    if (!unique.has(nome)) {\n      unique.add(nome);\n      cities.push({ name: nome, normalized: normalizeCityForCompare(nome) });\n    }\n  }\n  return cities;\n}\n\nexport async function findBestCityMatch(\n  input: string,\n  minScore = 0.78\n): Promise<MatchResult> {\n  const cityList = await getBrazilianCities();\n  const cleanedInputTitle = toTitleCaseBR(stripUfSuffix(input).trim());\n  const q = normalizeCityForCompare(cleanedInputTitle);\n\n  if (!q) return { best: null, score: 0, candidate: null };\n\n  let best: CanonicalCity | null = null;\n  let bestScore = -1;\n\n  for (const c of cityList) {\n    const s = similarity(q, c.normalized);\n    if (s > bestScore) {\n      bestScore = s;\n      best = c;\n    }\n  }\n\n  if (best && bestScore >= minScore) {\n    return { best: best.name, score: bestScore, candidate: cleanedInputTitle };\n  }\n  // fallback: se já está “ok” (acentos fora / capitalização), apenas padroniza o título\n  if (bestScore < minScore) {\n    const noDia = stripDiacritics(cleanedInputTitle);\n    for (const c of cityList) {\n      if (stripDiacritics(c.name).toLowerCase() === noDia.toLowerCase()) {\n        return { best: c.name, score: 1, candidate: cleanedInputTitle };\n      }\n    }\n  }\n\n  return { best: null, score: bestScore, candidate: cleanedInputTitle };\n}\n\nfunction toSimple(s: string) {\n  return s.trim().toLowerCase();\n}\n\nexport async function dryRunNormalizeCities() {\n  // 1) Carrega todos os usuários\n  console.log(\"Carregando usuários...\");\n  const allUsers = await userController.getAllUsers();\n\n  // 2) Lista oficial de cidades\n  console.log(\"Carregando lista de cidades...\");\n  const cities = await getBrazilianCities();\n\n  // 3) Varre e sugere correções\n  const suggestions: Array<{\n    id: string;\n    before: string;\n    after: string;\n    score: number;\n  }> = [];\n\n  for (const u of allUsers) {\n    const before = (u.city ?? \"\").toString();\n    if (!before.trim()) continue;\n\n    const match = await findBestCityMatch(before);\n    if (match.best && toSimple(before) !== toSimple(match.best)) {\n      console.log(\n        `${before} -> ${match.best} (score ${match.score.toFixed(2)})`\n      );\n      suggestions.push({\n        id: u.id,\n        before,\n        after: match.best,\n        score: match.score,\n      });\n    }\n  }\n  return suggestions;\n}\n"],"mappings":";;;;;;;;AAAA,IAAAA,eAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AAA0C,SAAAD,uBAAAG,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAE1C,MAAMG,QAAQ,GAAG,IAAAC,wBAAiB,EAA0B,CAAC;;AAE7D;;AAMA,MAAMC,aAAa,GAAG,iBAAiB;AAEvC,SAASC,eAAeA,CAACC,CAAS,EAAE;EAClC,OAAOA,CAAC,CAACC,SAAS,CAAC,KAAK,CAAC,CAACC,OAAO,CAACJ,aAAa,EAAE,EAAE,CAAC;AACtD;AAEA,SAASK,aAAaA,CAACH,CAAS,EAAE;EAChC;EACA,OAAOA,CAAC,CAACE,OAAO,CAAC,0BAA0B,EAAE,EAAE,CAAC;AAClD;AAEA,SAASE,uBAAuBA,CAACJ,CAAS,EAAE;EAC1C,OAAOD,eAAe,CACpBI,aAAa,CAACH,CAAC,CAAC,CAACK,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACJ,OAAO,CAAC,MAAM,EAAE,GAAG,CAC3D,CAAC;AACH;AAEA,SAASK,aAAaA,CAACP,CAAS,EAAE;EAChC;EACA,MAAMQ,KAAK,GAAGR,CAAC,CAACM,WAAW,CAAC,CAAC;EAC7B,MAAMG,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;EAChE,OAAOF,KAAK,CACTG,KAAK,CAAC,KAAK,CAAC,CACZC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IACb,IAAIA,CAAC,GAAG,CAAC,IAAIL,SAAS,CAACM,GAAG,CAACF,CAAC,CAAC,EAAE,OAAOA,CAAC;IACvC,OAAOA,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGJ,CAAC,CAACK,KAAK,CAAC,CAAC,CAAC;EAC/C,CAAC,CAAC,CACDC,IAAI,CAAC,GAAG,CAAC;AACd;;AAEA;AACA,SAASC,WAAWA,CAACC,CAAS,EAAEC,CAAS,EAAU;EACjD,IAAID,CAAC,KAAKC,CAAC,EAAE,OAAO,CAAC;EACrB,IAAI,CAACD,CAAC,CAACE,MAAM,EAAE,OAAOD,CAAC,CAACC,MAAM;EAC9B,IAAI,CAACD,CAAC,CAACC,MAAM,EAAE,OAAOF,CAAC,CAACE,MAAM;EAE9B,MAAMC,EAAE,GAAG,IAAIC,KAAK,CAACH,CAAC,CAACC,MAAM,GAAG,CAAC,CAAC;EAClC,MAAMG,EAAE,GAAG,IAAID,KAAK,CAACH,CAAC,CAACC,MAAM,GAAG,CAAC,CAAC;EAElC,KAAK,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIQ,CAAC,CAACC,MAAM,EAAET,CAAC,EAAE,EAAEU,EAAE,CAACV,CAAC,CAAC,GAAGA,CAAC;EAE7C,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGO,CAAC,CAACE,MAAM,EAAET,CAAC,EAAE,EAAE;IACjCY,EAAE,CAAC,CAAC,CAAC,GAAGZ,CAAC,GAAG,CAAC;IACb,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,CAAC,CAACC,MAAM,EAAEI,CAAC,EAAE,EAAE;MACjC,MAAMC,IAAI,GAAGP,CAAC,CAACP,CAAC,CAAC,KAAKQ,CAAC,CAACK,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;MAClCD,EAAE,CAACC,CAAC,GAAG,CAAC,CAAC,GAAGE,IAAI,CAACC,GAAG,CAClBJ,EAAE,CAACC,CAAC,CAAC,GAAG,CAAC;MAAE;MACXH,EAAE,CAACG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;MAAE;MACfH,EAAE,CAACG,CAAC,CAAC,GAAGC,IAAI,CAAC;MACf,CAAC;IACH;IACA,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIL,CAAC,CAACC,MAAM,EAAEI,CAAC,EAAE,EAAEH,EAAE,CAACG,CAAC,CAAC,GAAGD,EAAE,CAACC,CAAC,CAAC;EACnD;EACA,OAAOD,EAAE,CAACJ,CAAC,CAACC,MAAM,CAAC;AACrB;;AAEA;AACA,SAASQ,UAAUA,CAACV,CAAS,EAAEC,CAAS,EAAU;EAChD,MAAMU,IAAI,GAAGZ,WAAW,CAACC,CAAC,EAAEC,CAAC,CAAC;EAC9B,MAAMW,MAAM,GAAGJ,IAAI,CAACK,GAAG,CAACb,CAAC,CAACE,MAAM,EAAED,CAAC,CAACC,MAAM,CAAC,IAAI,CAAC;EAChD,OAAO,CAAC,GAAGS,IAAI,GAAGC,MAAM;AAC1B;AAQO,eAAeE,kBAAkBA,CAAA,EAA6B;EACnE,MAAMC,GAAG,GAAG,MAAMxC,QAAQ,CAACyC,OAAO,CAAC,WAAW,EAAE,YAAY;IAC1D,MAAMD,GAAG,GAAG,MAAME,KAAK,CACrB,gEACF,CAAC;IACD,IAAI,CAACF,GAAG,CAACG,EAAE,EACT,MAAM,IAAIC,KAAK,CAAC,uCAAuCJ,GAAG,CAACK,MAAM,EAAE,CAAC;IACtE,MAAMC,IAAI,GAAI,MAAMN,GAAG,CAACO,IAAI,CAAC,CAA6B;IAC1D,OAAOD,IAAI;EACb,CAAC,CAAC;EAEF,MAAME,MAAM,GAAG,IAAIlC,GAAG,CAAS,CAAC;EAChC,MAAMmC,MAAuB,GAAG,EAAE;EAClC,KAAK,MAAM;IAAEC;EAAK,CAAC,IAAIV,GAAG,CAACM,IAAI,EAAE;IAC/B,IAAI,CAACE,MAAM,CAAC7B,GAAG,CAAC+B,IAAI,CAAC,EAAE;MACrBF,MAAM,CAACG,GAAG,CAACD,IAAI,CAAC;MAChBD,MAAM,CAACG,IAAI,CAAC;QAAEC,IAAI,EAAEH,IAAI;QAAEI,UAAU,EAAE9C,uBAAuB,CAAC0C,IAAI;MAAE,CAAC,CAAC;IACxE;EACF;EACA,OAAOD,MAAM;AACf;AAEO,eAAeM,iBAAiBA,CACrCC,KAAa,EACbC,QAAQ,GAAG,IAAI,EACO;EACtB,MAAMC,QAAQ,GAAG,MAAMnB,kBAAkB,CAAC,CAAC;EAC3C,MAAMoB,iBAAiB,GAAGhD,aAAa,CAACJ,aAAa,CAACiD,KAAK,CAAC,CAAC/C,IAAI,CAAC,CAAC,CAAC;EACpE,MAAMmD,CAAC,GAAGpD,uBAAuB,CAACmD,iBAAiB,CAAC;EAEpD,IAAI,CAACC,CAAC,EAAE,OAAO;IAAEC,IAAI,EAAE,IAAI;IAAEC,KAAK,EAAE,CAAC;IAAEC,SAAS,EAAE;EAAK,CAAC;EAExD,IAAIF,IAA0B,GAAG,IAAI;EACrC,IAAIG,SAAS,GAAG,CAAC,CAAC;EAElB,KAAK,MAAMC,CAAC,IAAIP,QAAQ,EAAE;IACxB,MAAMtD,CAAC,GAAG+B,UAAU,CAACyB,CAAC,EAAEK,CAAC,CAACX,UAAU,CAAC;IACrC,IAAIlD,CAAC,GAAG4D,SAAS,EAAE;MACjBA,SAAS,GAAG5D,CAAC;MACbyD,IAAI,GAAGI,CAAC;IACV;EACF;EAEA,IAAIJ,IAAI,IAAIG,SAAS,IAAIP,QAAQ,EAAE;IACjC,OAAO;MAAEI,IAAI,EAAEA,IAAI,CAACR,IAAI;MAAES,KAAK,EAAEE,SAAS;MAAED,SAAS,EAAEJ;IAAkB,CAAC;EAC5E;EACA;EACA,IAAIK,SAAS,GAAGP,QAAQ,EAAE;IACxB,MAAMS,KAAK,GAAG/D,eAAe,CAACwD,iBAAiB,CAAC;IAChD,KAAK,MAAMM,CAAC,IAAIP,QAAQ,EAAE;MACxB,IAAIvD,eAAe,CAAC8D,CAAC,CAACZ,IAAI,CAAC,CAAC3C,WAAW,CAAC,CAAC,KAAKwD,KAAK,CAACxD,WAAW,CAAC,CAAC,EAAE;QACjE,OAAO;UAAEmD,IAAI,EAAEI,CAAC,CAACZ,IAAI;UAAES,KAAK,EAAE,CAAC;UAAEC,SAAS,EAAEJ;QAAkB,CAAC;MACjE;IACF;EACF;EAEA,OAAO;IAAEE,IAAI,EAAE,IAAI;IAAEC,KAAK,EAAEE,SAAS;IAAED,SAAS,EAAEJ;EAAkB,CAAC;AACvE;AAEA,SAASQ,QAAQA,CAAC/D,CAAS,EAAE;EAC3B,OAAOA,CAAC,CAACK,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;AAC/B;AAEO,eAAe0D,qBAAqBA,CAAA,EAAG;EAC5C;EACAC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACrC,MAAMC,QAAQ,GAAG,MAAMC,uBAAc,CAACC,WAAW,CAAC,CAAC;;EAEnD;EACAJ,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;EAC7C,MAAMrB,MAAM,GAAG,MAAMV,kBAAkB,CAAC,CAAC;;EAEzC;EACA,MAAMmC,WAKJ,GAAG,EAAE;EAEP,KAAK,MAAMC,CAAC,IAAIJ,QAAQ,EAAE;IACxB,MAAMK,MAAM,GAAG,CAACD,CAAC,CAACE,IAAI,IAAI,EAAE,EAAEC,QAAQ,CAAC,CAAC;IACxC,IAAI,CAACF,MAAM,CAACnE,IAAI,CAAC,CAAC,EAAE;IAEpB,MAAMsE,KAAK,GAAG,MAAMxB,iBAAiB,CAACqB,MAAM,CAAC;IAC7C,IAAIG,KAAK,CAAClB,IAAI,IAAIM,QAAQ,CAACS,MAAM,CAAC,KAAKT,QAAQ,CAACY,KAAK,CAAClB,IAAI,CAAC,EAAE;MAC3DQ,OAAO,CAACC,GAAG,CACT,GAAGM,MAAM,OAAOG,KAAK,CAAClB,IAAI,WAAWkB,KAAK,CAACjB,KAAK,CAACkB,OAAO,CAAC,CAAC,CAAC,GAC7D,CAAC;MACDN,WAAW,CAACtB,IAAI,CAAC;QACf6B,EAAE,EAAEN,CAAC,CAACM,EAAE;QACRL,MAAM;QACNM,KAAK,EAAEH,KAAK,CAAClB,IAAI;QACjBC,KAAK,EAAEiB,KAAK,CAACjB;MACf,CAAC,CAAC;IACJ;EACF;EACA,OAAOY,WAAW;AACpB","ignoreList":[]}