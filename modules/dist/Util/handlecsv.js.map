{"version":3,"file":"handlecsv.js","names":["_fs","_interopRequireDefault","require","_csvParser","e","__esModule","default","formatPhoneNumber","phone","cleaned","replace","withoutCountryCode","startsWith","substring","processCSV","filePath","Promise","resolve","reject","contacts","fs","createReadStream","pipe","csv","on","row","push","name","error","removeDuplicates","uniqueContacts","seenPhones","Set","contact","has","add","writeCSV","csvContent","map","join","writeFile","main","file1Path","file2Path","outputPath","contacts1","contacts2","allContacts","console","log"],"sources":["../../src/Util/handlecsv.ts"],"sourcesContent":["import fs from 'fs';\nimport csv from 'csv-parser';\n\ninterface Contact {\n  name: string;\n  phone: string;\n}\n\nconst formatPhoneNumber = (phone: string): string => {\n  // Remove any non-digit characters\n  const cleaned = phone.replace(/\\D/g, '');\n  \n  // Remove the leading 55 if present\n  const withoutCountryCode = cleaned.startsWith('55') ? cleaned.substring(2) : cleaned;\n  \n  // Format the phone number\n  return `(${withoutCountryCode.substring(0, 2)})${withoutCountryCode.substring(2, 7)}-${withoutCountryCode.substring(7)}`;\n};\n\nconst processCSV = async (filePath: string): Promise<Contact[]> => {\n  return new Promise((resolve, reject) => {\n    const contacts: Contact[] = [];\n    \n    fs.createReadStream(filePath)\n      .pipe(csv())\n      .on('data', (row) => {\n        contacts.push({\n          name: row.name,\n          phone: formatPhoneNumber(row.phone),\n        });\n      })\n      .on('end', () => {\n        resolve(contacts);\n      })\n      .on('error', (error) => {\n        reject(error);\n      });\n  });\n};\n\nconst removeDuplicates = (contacts: Contact[]): Contact[] => {\n  const uniqueContacts: Contact[] = [];\n  const seenPhones = new Set<string>();\n  \n  for (const contact of contacts) {\n    if (!seenPhones.has(contact.phone)) {\n      seenPhones.add(contact.phone);\n      uniqueContacts.push(contact);\n    }\n  }\n  \n  return uniqueContacts;\n};\n\nconst writeCSV = (filePath: string, contacts: Contact[]): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    const csvContent = contacts.map((contact) => `${contact.name},${contact.phone}`).join('\\n');\n    \n    fs.writeFile(filePath, csvContent, (error) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n\nconst main = async () => {\n  try {\n    const file1Path = 'path/to/file1.csv';\n    const file2Path = 'path/to/file2.csv';\n    const outputPath = 'path/to/output.csv';\n    \n    const contacts1 = await processCSV(file1Path);\n    const contacts2 = await processCSV(file2Path);\n    \n    const allContacts = [...contacts1, ...contacts2];\n    const uniqueContacts = removeDuplicates(allContacts);\n    \n    await writeCSV(outputPath, uniqueContacts);\n    \n    console.log('CSV processing completed successfully.');\n  } catch (error) {\n    console.error('Error processing CSV files:', error);\n  }\n};\n\nmain();"],"mappings":"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","ignoreList":[]}